swagger: "2.0"
info:
  description: "Kéne egy csapatnév Számítógép-biztonság HF"
  version: "1.0.0"
  title: "KeneEgyCsapatnev"
host: "localhost:8080"
tags:
- name: "auth"
  description: "authentication-related"
- name: "user"
  description: "user-related"
- name: "admin"
  description: "admin-related"

schemes:
- "http"
paths:
  /auth/signup:
    post:
      tags:
      - "auth"
      summary: "Signs up a new user"
      operationId: "registerUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "The user to sign up"
        required: true
        schema:
          $ref: "#/definitions/SignupRequest"
      responses:
        200:
          description: "User registrated successfully!"
        400:
          description: "Error: Username is already taken! or Email is already in use!"
  /auth/signin:
	post:
	  tags:
	  - "auth"
	  summary: "Signs in an existing user"
	  operationId: "authenticateUser"
	  consumes:
	  - "application/json"
	  produces:
	  - "application/json"
	  parameters:
	  - in: "body"
		name: "body"
		description: "The user to log in"
		required: true
		schema:
		  $ref: "#/definitions/LoginRequest"
	  responses:
		200:
		  schema:
			$ref: "#/definitions/LoginResponse"
  /user/view:
	get:
	  tags:
	  - "user"
	  summary: "Show the user's profile"
	  operationId: "getUserProfile"
	  produces:
	  - "application/json"
	  responses:
	    200:
		  schema:
		    $ref: "#/definitions/User"
  /user/edit:
    put:
	  tags:
	  - "user"
	  summary: "Edit the user's profile"
	  operationId: "updateUserProfile"
	  consumes:
	  - "application/json"
	  produces:
	  - "application/json"
	  parameters:
	  - in: "body"
		name: "body"
		description: "The updated values for the user"
		required: true
		schema:
		  $ref: "#/definitions/User"
	  responses:
		200:
		  description: "User was updated successfully"
  /user/comment/{caffid}:
	put:
	  tags:
	  - "user"
	  summary: "Add a comment to the CAFF file"
	  operationId: "commentCAFF"
	  consumes:
	  - "application/json"
	  produces:
	  - "application/json"
	  parameters:
	  - name: "caffid"
		in: "path"
		description: "The commented CAFF file's id"
		required: true
		type: "long"
	  - in: "body"
		name: "body"
		description: "The comment itself"
		required: true
		schema:
		  $ref: "#/definitions/Comment"
	  responses:
		200:
		  description: "Comment added successfully"
		400:
		  description: "CAFF not found"
  /user/upload:
	post:
	  tags:
	  - "user"
	  summary: "Upload a CAFF file"
	  operationId: "uploadCAFF"
	  consumes:
	  - "application/json"
	  produces:
	  - "application/json"
	  parameters:
	  - in: "body"
		name: "body"
		description: "The CAFF file"
		required: true
		schema:
		  $ref: "#/definitions/CAFFUpDownLoad"
	  responses:
		200:
		  description: "CAFF uploaded successfully"
  /user/download/{caffid}:
	get:
	  tags:
	  - "user"
	  summary: "Download a CAFF file"
	  operationId: "downloadCAFF"
	  produces:
	  - "application/json"
	  parameters:
	  - name: "caffid"
		in: "path"
		description: "The to-be-downloaded CAFF file's id"
		required: true
		type: "long"
	  responses:
		200:
		  schema:
			$ref: "#/definitions/CAFFUpDownLoad"
		400:
		  description: "CAFF not found"
  /user/view/{caffid}:
	get:
	  tags:
	  - "user"
	  summary: "View a CAFF file"
	  operationId: "viewCAFF"
	  produces:
	  - "application/json"
	  parameters:
	  - name: "caffid"
		in: "path"
		description: "The viewn CAFF file's id"
		required: true
		type: "long"
	  responses:
		200:
		  schema:
			$ref: "#/definitions/CAFFPreview"
		400:
		  description: "CAFF not found"
  /user/list:
	get:
	  tags:
	  - "user"
	  summary: "Show all CAFF files"
	  operationId: "listCAFF"
	  produces:
	  - "application/json"
	  responses:
		200:
		  schema:
			type: "array"
			items:
			  $ref: "#/definitions/CAFFPreview"
  /user/find/{namefilter}:
	get:
	  tags:
	  - "user"
	  summary: "Search for a CAFF by name"
	  operationId: "findCAFF"
	  produces:
	  - "application/json"
	  parameters:
	  - name: "namefilter"
		in: "path"
		description: "A part of the searched CAFF's name"
		required: true
		type: "string"
	  responses:
		200:
		  schema:
			type: "array"
			items:
			  $ref: "#/definitions/CAFFPreview"
		400:
		  description: "CAFFs not found"
  /admin/user/{userid}:
	get:
	  tags:
	  - "admin"
	  summary: "Show the selected user's profile"
	  operationId: "getAdminUserProfile"
	  produces:
	  - "application/json"
	  parameters:
	  - name: "userid"
		in: "path"
		description: "The selected user's id"
		required: true
		type: "long"
	  responses:
	    200:
		  schema:
		    $ref: "#/definitions/User"
		400:
		  description: "User not found"
    put:
	  tags:
	  - "admin"
	  summary: "Edit the selected user's profile"
	  operationId: "updateAdminUserProfile"
	  consumes:
	  - "application/json"
	  produces:
	  - "application/json"
	  parameters:
	  - name: "userid"
		in: "path"
		description: "The selected user's id"
		required: true
		type: "long"
	  - in: "body"
		name: "body"
		description: "The updated values for the user"
		required: true
		schema:
		  $ref: "#/definitions/User"
	  responses:
		200:
		  description: "User was updated successfully"
		400:
		  description: "User not found"
	delete:
	  tags:
	  - "admin"
	  summary: "Delete the selected user's profile"
	  operationId: "deleteAdminUserProfile"
	  produces:
	  - "application/json"
	  parameters:
	  - name: "userid"
		in: "path"
		description: "The selected user's id"
		required: true
		type: "long"
	  responses:
	    200:
		  description: "User deleted successfully"
		400:
		  description: "User not found"
  /admin/caff/{caffid}:
    put:
	  tags:
	  - "admin"
	  summary: "Edit the selected CAFF file"
	  operationId: "updateAdminCAFF"
	  consumes:
	  - "application/json"
	  produces:
	  - "application/json"
	  parameters:
	  - name: "caffid"
		in: "path"
		description: "The selected CAFF file's id"
		required: true
		type: "long"
	  - in: "body"
		name: "body"
		description: "The updated values for the CAFF preview"
		required: true
		schema:
		  $ref: "#/definitions/CAFFPreview"
	  responses:
		200:
		  description: "CAFF preview was updated successfully"
		400:
		  description: "CAFF file not found"
	delete:
	  tags:
	  - "admin"
	  summary: "Delete the selected CAFF file"
	  operationId: "deleteAdminCAFF"
	  produces:
	  - "application/json"
	  parameters:
	  - name: "caffid"
		in: "path"
		description: "The selected CAFF file's id"
		required: true
		type: "long"
	  responses:
	    200:
		  description: "CAFF file deleted successfully"
		400:
		  description: "CAFF file not found"

definitions:
  CAFFUpDownLoad:
    type: "object"
    required:
    - "name"
    - "file"
    properties:
      name:
        type: "string"
        description: "The name of the CAFF file"
      file:
        type: "file"
        description: "The CAFF file"
  CAFFPreview:
    type: "object"
    required:
	- "id"
    - "name"
	- "preview"
    properties:
	  id:
		type: "long"
      name:
        type: "string"
        description: "The name of the CAFF file"
	  preview:
		type: "file"
		description: "The image generated from first CIFF in CAFF"
      comments:
        type: "array"
		items:
          $ref: "#/definitions/Comment"
        description: "The comments on the CAFF preview"
  Comment:
    type: "object"
	required:
	- "id"
	- "username"
	- "comment"
    properties:
      id:
        type: "long"
      username:
        type: "string"
        description: "The commenting user's username"
	  comment:
		type: "string"
		description: "The comment itself"
  User:
    type: "object"
    required:
	- "user_id"
	- "username"
	- "email"
	- "password"
    properties:
      user_id:
        type: "long"
      username:
        type: "string"
	  email:
		type: "string"
	  password:
		type: "string"
  LoginRequest:
    type: "object"
    required:
	- "username"
	- "password"
    properties:
      username:
        type: "string"
	  password:
		type: "string"
  LoginResponse:
    type: "object"
    required:
	- "jwt"
	- "type"
	- "id"
	- "username"
	- "email"
	- "roles"
    properties:
      jwt:
        type: "string"
	  type:
		type: "string"
	  id:
		type: "long"
      username:
        type: "string"
	  email:
		type: "string"
	  roles:
		type: "array"
		items:
		  type: "string"
  MessageResponse:
    type: "object"
    required:
	- "message"
    properties:
      message:
        type: "string"
  SignupRequest:
    type: "object"
    required:
	- "username"
	- "email"
	- "password"
    properties:
      username:
        type: "string"
	  email:
		type: "string"
	  password:
		type: "string"